{-
   IEX Haskell SDK

   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   OpenAPI Version: 3.0.0
   IEX Haskell SDK API version: 1.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : IEXHaskellSDK.API.ApiDefault
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module IEXHaskellSDK.API.ApiDefault where

import           IEXHaskellSDK.Core
import           IEXHaskellSDK.MimeTypes
import           IEXHaskellSDK.Model           as M

import qualified Data.Aeson                    as A
import qualified Data.ByteString               as B
import qualified Data.ByteString.Lazy          as BL
import qualified Data.Data                     as P
                                                ( Typeable
                                                , TypeRep
                                                , typeOf
                                                , typeRep
                                                )
import qualified Data.Foldable                 as P
import qualified Data.Map                      as Map
import qualified Data.Maybe                    as P
import qualified Data.Proxy                    as P
                                                ( Proxy(..) )
import qualified Data.Set                      as Set
import qualified Data.String                   as P
import qualified Data.Text                     as T
import qualified Data.Text.Encoding            as T
import qualified Data.Text.Lazy                as TL
import qualified Data.Text.Lazy.Encoding       as TL
import qualified Data.Time                     as TI
import qualified Network.HTTP.Client.MultipartFormData
                                               as NH
import qualified Network.HTTP.Media            as ME
import qualified Network.HTTP.Types            as NH
import qualified Web.FormUrlEncoded            as WH
import qualified Web.HttpApiData               as WH

import           Data.Text                      ( Text )
import           GHC.Base                       ( (<|>) )

import           Prelude                        ( (==)
                                                , (/=)
                                                , ($)
                                                , (.)
                                                , (<$>)
                                                , (<*>)
                                                , (>>=)
                                                , Maybe(..)
                                                , Bool(..)
                                                , Char
                                                , Double
                                                , FilePath
                                                , Float
                                                , Int
                                                , Integer
                                                , String
                                                , fmap
                                                , undefined
                                                , mempty
                                                , maybe
                                                , pure
                                                , Monad
                                                , Applicative
                                                , Functor
                                                )
import qualified Prelude                       as P

-- * Operations


-- ** Default

-- *** deepAuctionGet

-- | @GET \/deep\/auction@
-- 
deepAuctionGet
  :: IEXHaskellSDKRequest
       DeepAuctionGet
       MimeNoContent
       ((Map.Map String Auction))
       MimeJSON
deepAuctionGet = _mkRequest "GET" ["/deep/auction"]

data DeepAuctionGet
instance HasOptionalParam DeepAuctionGet Symbols where
  applyOptionalParam req (Symbols xs) =
    req `setQuery` toQueryColl MultiParamArray ("symbols", Just xs)
-- | @application/json@
instance Produces DeepAuctionGet MimeJSON


-- *** deepBookGet

-- | @GET \/deep\/book@
-- 
deepBookGet
  :: IEXHaskellSDKRequest
       DeepBookGet
       MimeNoContent
       ((Map.Map String DeepBookGetResponse))
       MimeJSON
deepBookGet = _mkRequest "GET" ["/deep/book"]

data DeepBookGet
instance HasOptionalParam DeepBookGet Symbols where
  applyOptionalParam req (Symbols xs) =
    req `setQuery` toQueryColl MultiParamArray ("symbols", Just xs)
-- | @application/json@
instance Produces DeepBookGet MimeJSON


-- *** deepGet

-- | @GET \/deep@
-- 
deepGet
  :: SymbolsText -- ^ "symbols"
  -> IEXHaskellSDKRequest DeepGet MimeNoContent DeepGetResponse MimeJSON
deepGet (SymbolsText symbols) =
  _mkRequest "GET" ["/deep"] `setQuery` toQuery ("symbols", Just symbols)

data DeepGet
-- | @application/json@
instance Produces DeepGet MimeJSON


-- *** deepOfficialPriceGet

-- | @GET \/deep\/official-price@
-- 
deepOfficialPriceGet
  :: Symbols -- ^ "symbols"
  -> IEXHaskellSDKRequest
       DeepOfficialPriceGet
       MimeNoContent
       ((Map.Map String DeepOfficialPriceGetResponse))
       MimeJSON
deepOfficialPriceGet (Symbols symbols) =
  _mkRequest "GET" ["/deep/official-price"]
    `setQuery` toQueryColl MultiParamArray ("symbols", Just symbols)

data DeepOfficialPriceGet
-- | @application/json@
instance Produces DeepOfficialPriceGet MimeJSON


-- *** deepOpHaltStatusGet

-- | @GET \/deep\/op-halt-status@
-- 
deepOpHaltStatusGet
  :: IEXHaskellSDKRequest
       DeepOpHaltStatusGet
       MimeNoContent
       ((Map.Map String DeepOpHaltStatusGetResponse))
       MimeJSON
deepOpHaltStatusGet = _mkRequest "GET" ["/deep/op-halt-status"]

data DeepOpHaltStatusGet
instance HasOptionalParam DeepOpHaltStatusGet Symbols where
  applyOptionalParam req (Symbols xs) =
    req `setQuery` toQueryColl MultiParamArray ("symbols", Just xs)
-- | @application/json@
instance Produces DeepOpHaltStatusGet MimeJSON


-- *** deepSecurityEventGet

-- | @GET \/deep\/security-event@
-- 
deepSecurityEventGet
  :: IEXHaskellSDKRequest
       DeepSecurityEventGet
       MimeNoContent
       ((Map.Map String DeepSecurityEventGetResponse))
       MimeJSON
deepSecurityEventGet = _mkRequest "GET" ["/deep/security-event"]

data DeepSecurityEventGet
instance HasOptionalParam DeepSecurityEventGet Symbols where
  applyOptionalParam req (Symbols xs) =
    req `setQuery` toQueryColl MultiParamArray ("symbols", Just xs)
-- | @application/json@
instance Produces DeepSecurityEventGet MimeJSON


-- *** deepSsrStatusGet

-- | @GET \/deep\/ssr-status@
-- 
deepSsrStatusGet
  :: IEXHaskellSDKRequest
       DeepSsrStatusGet
       MimeNoContent
       ((Map.Map String DeepGetResponseSsrStatus))
       MimeJSON
deepSsrStatusGet = _mkRequest "GET" ["/deep/ssr-status"]

data DeepSsrStatusGet
instance HasOptionalParam DeepSsrStatusGet Symbols where
  applyOptionalParam req (Symbols xs) =
    req `setQuery` toQueryColl MultiParamArray ("symbols", Just xs)
-- | @application/json@
instance Produces DeepSsrStatusGet MimeJSON


-- *** deepSystemEventGet

-- | @GET \/deep\/system-event@
-- 
deepSystemEventGet
  :: IEXHaskellSDKRequest
       DeepSystemEventGet
       MimeNoContent
       DeepSystemEventGetResponse
       MimeJSON
deepSystemEventGet = _mkRequest "GET" ["/deep/system-event"]

data DeepSystemEventGet
-- | @application/json@
instance Produces DeepSystemEventGet MimeJSON


-- *** deepTradeBreaksGet

-- | @GET \/deep\/trade-breaks@
-- 
deepTradeBreaksGet
  :: IEXHaskellSDKRequest
       DeepTradeBreaksGet
       MimeNoContent
       ((Map.Map String [Trade]))
       MimeJSON
deepTradeBreaksGet = _mkRequest "GET" ["/deep/trade-breaks"]

data DeepTradeBreaksGet
instance HasOptionalParam DeepTradeBreaksGet Symbols where
  applyOptionalParam req (Symbols xs) =
    req `setQuery` toQueryColl MultiParamArray ("symbols", Just xs)
instance HasOptionalParam DeepTradeBreaksGet Last where
  applyOptionalParam req (Last xs) = req `setQuery` toQuery ("last", Just xs)
-- | @application/json@
instance Produces DeepTradeBreaksGet MimeJSON


-- *** deepTradesGet

-- | @GET \/deep\/trades@
-- 
deepTradesGet
  :: IEXHaskellSDKRequest
       DeepTradesGet
       MimeNoContent
       ((Map.Map String [Trade]))
       MimeJSON
deepTradesGet = _mkRequest "GET" ["/deep/trades"]

data DeepTradesGet
instance HasOptionalParam DeepTradesGet Symbols where
  applyOptionalParam req (Symbols xs) =
    req `setQuery` toQueryColl MultiParamArray ("symbols", Just xs)
instance HasOptionalParam DeepTradesGet Last where
  applyOptionalParam req (Last xs) = req `setQuery` toQuery ("last", Just xs)
-- | @application/json@
instance Produces DeepTradesGet MimeJSON


-- *** deepTradingStatusGet

-- | @GET \/deep\/trading-status@
-- 
deepTradingStatusGet
  :: IEXHaskellSDKRequest
       DeepTradingStatusGet
       MimeNoContent
       ((Map.Map String DeepTradingStatusGetResponse))
       MimeJSON
deepTradingStatusGet = _mkRequest "GET" ["/deep/trading-status"]

data DeepTradingStatusGet
instance HasOptionalParam DeepTradingStatusGet Symbols where
  applyOptionalParam req (Symbols xs) =
    req `setQuery` toQueryColl MultiParamArray ("symbols", Just xs)
-- | @application/json@
instance Produces DeepTradingStatusGet MimeJSON


-- *** histGet

-- | @GET \/hist@
-- 
histGet :: IEXHaskellSDKRequest HistGet MimeNoContent [HistGetResponse] MimeJSON
histGet = _mkRequest "GET" ["/hist"]

data HistGet
instance HasOptionalParam HistGet ParamDate where
  applyOptionalParam req (ParamDate xs) =
    req `setQuery` toQuery ("date", Just xs)
-- | @application/json@
instance Produces HistGet MimeJSON


-- *** marketGet

-- | @GET \/market@
-- 
marketGet
  :: IEXHaskellSDKRequest MarketGet MimeNoContent [MarketGetResponse] MimeJSON
marketGet = _mkRequest "GET" ["/market"]

data MarketGet
instance HasOptionalParam MarketGet Format where
  applyOptionalParam req (Format xs) =
    req `setQuery` toQuery ("format", Just xs)
-- | @application/json@
instance Produces MarketGet MimeJSON


-- *** refDataDailyListCorporateActionsDateGet

-- | @GET \/ref-data\/daily-list\/corporate-actions\/{date}@
-- 
refDataDailyListCorporateActionsDateGet
  :: ParamDate -- ^ "date"
  -> IEXHaskellSDKRequest
       RefDataDailyListCorporateActionsDateGet
       MimeNoContent
       [CorporateAction]
       MimeJSON
refDataDailyListCorporateActionsDateGet (ParamDate date) =
  _mkRequest "GET" ["/ref-data/daily-list/corporate-actions/", toPath date]

data RefDataDailyListCorporateActionsDateGet
instance HasOptionalParam RefDataDailyListCorporateActionsDateGet Format2 where
  applyOptionalParam req (Format2 xs) =
    req `setQuery` toQuery ("format", Just xs)

-- | /Optional Param/ "token" - Value is the API token from your IEX user account. If you have been permissioned for CUSIP information you'll  receive a CUSIP field, otherwise data defaults to exclude CUSIP. 
instance HasOptionalParam RefDataDailyListCorporateActionsDateGet Token where
  applyOptionalParam req (Token xs) = req `setQuery` toQuery ("token", Just xs)
-- | @application/json@
instance Produces RefDataDailyListCorporateActionsDateGet MimeJSON


-- *** refDataDailyListCorporateActionsGet

-- | @GET \/ref-data\/daily-list\/corporate-actions@
-- 
refDataDailyListCorporateActionsGet
  :: IEXHaskellSDKRequest
       RefDataDailyListCorporateActionsGet
       MimeNoContent
       [CorporateAction]
       MimeJSON
refDataDailyListCorporateActionsGet =
  _mkRequest "GET" ["/ref-data/daily-list/corporate-actions"]

data RefDataDailyListCorporateActionsGet
instance HasOptionalParam RefDataDailyListCorporateActionsGet Format2 where
  applyOptionalParam req (Format2 xs) =
    req `setQuery` toQuery ("format", Just xs)

-- | /Optional Param/ "token" - Value is the API token from your IEX user account. If you have been permissioned for CUSIP information you'll  receive a CUSIP field, otherwise data defaults to exclude CUSIP. 
instance HasOptionalParam RefDataDailyListCorporateActionsGet Token where
  applyOptionalParam req (Token xs) = req `setQuery` toQuery ("token", Just xs)
-- | @application/json@
instance Produces RefDataDailyListCorporateActionsGet MimeJSON


-- *** refDataDailyListDividendsDateGet

-- | @GET \/ref-data\/daily-list\/dividends\/{date}@
-- 
refDataDailyListDividendsDateGet
  :: ParamDate -- ^ "date"
  -> IEXHaskellSDKRequest
       RefDataDailyListDividendsDateGet
       MimeNoContent
       [DividendCoreData]
       MimeJSON
refDataDailyListDividendsDateGet (ParamDate date) =
  _mkRequest "GET" ["/ref-data/daily-list/dividends/", toPath date]

data RefDataDailyListDividendsDateGet
instance HasOptionalParam RefDataDailyListDividendsDateGet Format2 where
  applyOptionalParam req (Format2 xs) =
    req `setQuery` toQuery ("format", Just xs)

-- | /Optional Param/ "token" - Value is the API token from your IEX user account. If you have been permissioned for CUSIP information you'll  receive a CUSIP field, otherwise data defaults to exclude CUSIP. 
instance HasOptionalParam RefDataDailyListDividendsDateGet Token where
  applyOptionalParam req (Token xs) = req `setQuery` toQuery ("token", Just xs)
-- | @application/json@
instance Produces RefDataDailyListDividendsDateGet MimeJSON


-- *** refDataDailyListDividendsGet

-- | @GET \/ref-data\/daily-list\/dividends@
-- 
refDataDailyListDividendsGet
  :: IEXHaskellSDKRequest
       RefDataDailyListDividendsGet
       MimeNoContent
       [DividendCoreData]
       MimeJSON
refDataDailyListDividendsGet =
  _mkRequest "GET" ["/ref-data/daily-list/dividends"]

data RefDataDailyListDividendsGet
instance HasOptionalParam RefDataDailyListDividendsGet Format2 where
  applyOptionalParam req (Format2 xs) =
    req `setQuery` toQuery ("format", Just xs)

-- | /Optional Param/ "token" - Value is the API token from your IEX user account. If you have been permissioned for CUSIP information you'll  receive a CUSIP field, otherwise data defaults to exclude CUSIP. 
instance HasOptionalParam RefDataDailyListDividendsGet Token where
  applyOptionalParam req (Token xs) = req `setQuery` toQuery ("token", Just xs)
-- | @application/json@
instance Produces RefDataDailyListDividendsGet MimeJSON


-- *** refDataDailyListNextDayExDateDateGet

-- | @GET \/ref-data\/daily-list\/next-day-ex-date\/{date}@
-- 
refDataDailyListNextDayExDateDateGet
  :: ParamDate -- ^ "date"
  -> IEXHaskellSDKRequest
       RefDataDailyListNextDayExDateDateGet
       MimeNoContent
       [DividendCoreData]
       MimeJSON
refDataDailyListNextDayExDateDateGet (ParamDate date) =
  _mkRequest "GET" ["/ref-data/daily-list/next-day-ex-date/", toPath date]

data RefDataDailyListNextDayExDateDateGet
instance HasOptionalParam RefDataDailyListNextDayExDateDateGet Format2 where
  applyOptionalParam req (Format2 xs) =
    req `setQuery` toQuery ("format", Just xs)

-- | /Optional Param/ "token" - Value is the API token from your IEX user account. If you have been permissioned for CUSIP information you'll  receive a CUSIP field, otherwise data defaults to exclude CUSIP. 
instance HasOptionalParam RefDataDailyListNextDayExDateDateGet Token where
  applyOptionalParam req (Token xs) = req `setQuery` toQuery ("token", Just xs)
-- | @application/json@
instance Produces RefDataDailyListNextDayExDateDateGet MimeJSON


-- *** refDataDailyListNextDayExDateGet

-- | @GET \/ref-data\/daily-list\/next-day-ex-date@
-- 
refDataDailyListNextDayExDateGet
  :: IEXHaskellSDKRequest
       RefDataDailyListNextDayExDateGet
       MimeNoContent
       [DividendCoreData]
       MimeJSON
refDataDailyListNextDayExDateGet =
  _mkRequest "GET" ["/ref-data/daily-list/next-day-ex-date"]

data RefDataDailyListNextDayExDateGet
instance HasOptionalParam RefDataDailyListNextDayExDateGet Format2 where
  applyOptionalParam req (Format2 xs) =
    req `setQuery` toQuery ("format", Just xs)

-- | /Optional Param/ "token" - Value is the API token from your IEX user account. If you have been permissioned for CUSIP information you'll  receive a CUSIP field, otherwise data defaults to exclude CUSIP. 
instance HasOptionalParam RefDataDailyListNextDayExDateGet Token where
  applyOptionalParam req (Token xs) = req `setQuery` toQuery ("token", Just xs)
-- | @application/json@
instance Produces RefDataDailyListNextDayExDateGet MimeJSON


-- *** refDataDailyListSymbolDirectoryDateGet

-- | @GET \/ref-data\/daily-list\/symbol-directory\/{date}@
-- 
refDataDailyListSymbolDirectoryDateGet
  :: ParamDate -- ^ "date"
  -> IEXHaskellSDKRequest
       RefDataDailyListSymbolDirectoryDateGet
       MimeNoContent
       [ListedSymbolData]
       MimeJSON
refDataDailyListSymbolDirectoryDateGet (ParamDate date) =
  _mkRequest "GET" ["/ref-data/daily-list/symbol-directory/", toPath date]

data RefDataDailyListSymbolDirectoryDateGet
instance HasOptionalParam RefDataDailyListSymbolDirectoryDateGet Format2 where
  applyOptionalParam req (Format2 xs) =
    req `setQuery` toQuery ("format", Just xs)

-- | /Optional Param/ "token" - Value is the API token from your IEX user account. If you have been permissioned for CUSIP information you'll  receive a CUSIP field, otherwise data defaults to exclude CUSIP. 
instance HasOptionalParam RefDataDailyListSymbolDirectoryDateGet Token where
  applyOptionalParam req (Token xs) = req `setQuery` toQuery ("token", Just xs)
-- | @application/json@
instance Produces RefDataDailyListSymbolDirectoryDateGet MimeJSON


-- *** refDataDailyListSymbolDirectoryGet

-- | @GET \/ref-data\/daily-list\/symbol-directory@
-- 
refDataDailyListSymbolDirectoryGet
  :: IEXHaskellSDKRequest
       RefDataDailyListSymbolDirectoryGet
       MimeNoContent
       [ListedSymbolData]
       MimeJSON
refDataDailyListSymbolDirectoryGet =
  _mkRequest "GET" ["/ref-data/daily-list/symbol-directory"]

data RefDataDailyListSymbolDirectoryGet
instance HasOptionalParam RefDataDailyListSymbolDirectoryGet Format2 where
  applyOptionalParam req (Format2 xs) =
    req `setQuery` toQuery ("format", Just xs)

-- | /Optional Param/ "token" - Value is the API token from your IEX user account. If you have been permissioned for CUSIP information you'll  receive a CUSIP field, otherwise data defaults to exclude CUSIP. 
instance HasOptionalParam RefDataDailyListSymbolDirectoryGet Token where
  applyOptionalParam req (Token xs) = req `setQuery` toQuery ("token", Just xs)
-- | @application/json@
instance Produces RefDataDailyListSymbolDirectoryGet MimeJSON


-- *** refDataSymbolsGet

-- | @GET \/ref-data\/symbols@
-- 
refDataSymbolsGet
  :: IEXHaskellSDKRequest
       RefDataSymbolsGet
       MimeNoContent
       [RefDataSymbolsGetResponse]
       MimeJSON
refDataSymbolsGet = _mkRequest "GET" ["/ref-data/symbols"]

data RefDataSymbolsGet
instance HasOptionalParam RefDataSymbolsGet Format where
  applyOptionalParam req (Format xs) =
    req `setQuery` toQuery ("format", Just xs)
-- | @application/json@
instance Produces RefDataSymbolsGet MimeJSON


-- *** statsHistoricalDailyGet

-- | @GET \/stats\/historical\/daily@
-- 
statsHistoricalDailyGet
  :: IEXHaskellSDKRequest
       StatsHistoricalDailyGet
       MimeNoContent
       [StatsHistoricalDailyGetResponse]
       MimeJSON
statsHistoricalDailyGet = _mkRequest "GET" ["/stats/historical/daily"]

data StatsHistoricalDailyGet
instance HasOptionalParam StatsHistoricalDailyGet Format where
  applyOptionalParam req (Format xs) =
    req `setQuery` toQuery ("format", Just xs)
instance HasOptionalParam StatsHistoricalDailyGet Last where
  applyOptionalParam req (Last xs) = req `setQuery` toQuery ("last", Just xs)
instance HasOptionalParam StatsHistoricalDailyGet ParamDateInt where
  applyOptionalParam req (ParamDateInt xs) =
    req `setQuery` toQuery ("date", Just xs)
-- | @application/json@
instance Produces StatsHistoricalDailyGet MimeJSON


-- *** statsHistoricalGet

-- | @GET \/stats\/historical@
-- 
statsHistoricalGet
  :: IEXHaskellSDKRequest StatsHistoricalGet MimeNoContent [Stats] MimeJSON
statsHistoricalGet = _mkRequest "GET" ["/stats/historical"]

data StatsHistoricalGet
instance HasOptionalParam StatsHistoricalGet ParamDateInt where
  applyOptionalParam req (ParamDateInt xs) =
    req `setQuery` toQuery ("date", Just xs)
instance HasOptionalParam StatsHistoricalGet Format where
  applyOptionalParam req (Format xs) =
    req `setQuery` toQuery ("format", Just xs)
-- | @application/json@
instance Produces StatsHistoricalGet MimeJSON


-- *** statsIntradayGet

-- | @GET \/stats\/intraday@
-- 
statsIntradayGet
  :: IEXHaskellSDKRequest
       StatsIntradayGet
       MimeNoContent
       StatsIntradayGetResponse
       MimeJSON
statsIntradayGet = _mkRequest "GET" ["/stats/intraday"]

data StatsIntradayGet
-- | @application/json@
instance Produces StatsIntradayGet MimeJSON


-- *** statsRecentGet

-- | @GET \/stats\/recent@
-- 
statsRecentGet
  :: IEXHaskellSDKRequest
       StatsRecentGet
       MimeNoContent
       [StatsRecentGetResponse]
       MimeJSON
statsRecentGet = _mkRequest "GET" ["/stats/recent"]

data StatsRecentGet
-- | @application/json@
instance Produces StatsRecentGet MimeJSON


-- *** statsRecordsGet

-- | @GET \/stats\/records@
-- 
statsRecordsGet
  :: IEXHaskellSDKRequest
       StatsRecordsGet
       MimeNoContent
       StatsRecordsGetResponse
       MimeJSON
statsRecordsGet = _mkRequest "GET" ["/stats/records"]

data StatsRecordsGet
-- | @application/json@
instance Produces StatsRecordsGet MimeJSON


-- *** stockMarketCollectionListGet

-- | @GET \/stock\/market\/collection\/list@
-- 
stockMarketCollectionListGet
  :: CollectionName2 -- ^ "collectionName"
  -> IEXHaskellSDKRequest
       StockMarketCollectionListGet
       MimeNoContent
       [Quote]
       MimeJSON
stockMarketCollectionListGet (CollectionName2 collectionName) =
  _mkRequest "GET" ["/stock/market/collection/list"]
    `setQuery` toQuery ("collectionName", Just collectionName)

data StockMarketCollectionListGet
-- | @application/json@
instance Produces StockMarketCollectionListGet MimeJSON


-- *** stockMarketCollectionSectorGet

-- | @GET \/stock\/market\/collection\/sector@
-- 
stockMarketCollectionSectorGet
  :: CollectionName -- ^ "collectionName"
  -> IEXHaskellSDKRequest
       StockMarketCollectionSectorGet
       MimeNoContent
       [Quote]
       MimeJSON
stockMarketCollectionSectorGet (CollectionName collectionName) =
  _mkRequest "GET" ["/stock/market/collection/sector"]
    `setQuery` toQuery ("collectionName", Just collectionName)

data StockMarketCollectionSectorGet
-- | @application/json@
instance Produces StockMarketCollectionSectorGet MimeJSON


-- *** stockMarketCollectionTagGet

-- | @GET \/stock\/market\/collection\/tag@
-- 
stockMarketCollectionTagGet
  :: CollectionName -- ^ "collectionName"
  -> IEXHaskellSDKRequest
       StockMarketCollectionTagGet
       MimeNoContent
       [Quote]
       MimeJSON
stockMarketCollectionTagGet (CollectionName collectionName) =
  _mkRequest "GET" ["/stock/market/collection/tag"]
    `setQuery` toQuery ("collectionName", Just collectionName)

data StockMarketCollectionTagGet
-- | @application/json@
instance Produces StockMarketCollectionTagGet MimeJSON


-- *** stockMarketCryptoGet

-- | @GET \/stock\/market\/crypto@
-- 
stockMarketCryptoGet
  :: IEXHaskellSDKRequest StockMarketCryptoGet MimeNoContent [Quote] MimeJSON
stockMarketCryptoGet = _mkRequest "GET" ["/stock/market/crypto"]

data StockMarketCryptoGet
-- | @application/json@
instance Produces StockMarketCryptoGet MimeJSON


-- *** stockMarketListListTypeGet

-- | @GET \/stock\/market\/list\/{listType}@
-- 
stockMarketListListTypeGet
  :: ListType -- ^ "listType"
  -> IEXHaskellSDKRequest
       StockMarketListListTypeGet
       MimeNoContent
       [Quote]
       MimeJSON
stockMarketListListTypeGet (ListType listType) =
  _mkRequest "GET" ["/stock/market/list/", toPath listType]

data StockMarketListListTypeGet

-- | /Optional Param/ "displayPercent" - If set to `true`, all percentage values will be multiplied by a factor of 100  (e.g. /stock/aapl/quote?displayPercent=true) 
instance HasOptionalParam StockMarketListListTypeGet DisplayPercent where
  applyOptionalParam req (DisplayPercent xs) =
    req `setQuery` toQuery ("displayPercent", Just xs)
-- | @application/json@
instance Produces StockMarketListListTypeGet MimeJSON


-- *** stockMarketNewsGet

-- | @GET \/stock\/market\/news@
-- 
stockMarketNewsGet
  :: IEXHaskellSDKRequest StockMarketNewsGet MimeNoContent [Article] MimeJSON
stockMarketNewsGet = _mkRequest "GET" ["/stock/market/news"]

data StockMarketNewsGet
-- | @application/json@
instance Produces StockMarketNewsGet MimeJSON


-- *** stockMarketNewsLastLastGet

-- | @GET \/stock\/market\/news\/last\/{last}@
-- 
stockMarketNewsLastLastGet
  :: Last -- ^ "last"
  -> IEXHaskellSDKRequest
       StockMarketNewsLastLastGet
       MimeNoContent
       [Article]
       MimeJSON
stockMarketNewsLastLastGet (Last last) =
  _mkRequest "GET" ["/stock/market/news/last/", toPath last]

data StockMarketNewsLastLastGet
-- | @application/json@
instance Produces StockMarketNewsLastLastGet MimeJSON


-- *** stockMarketOhlcGet

-- | @GET \/stock\/market\/ohlc@
-- 
stockMarketOhlcGet
  :: IEXHaskellSDKRequest
       StockMarketOhlcGet
       MimeNoContent
       ((Map.Map String OhlcData))
       MimeJSON
stockMarketOhlcGet = _mkRequest "GET" ["/stock/market/ohlc"]

data StockMarketOhlcGet
-- | @application/json@
instance Produces StockMarketOhlcGet MimeJSON


-- *** stockMarketPreviousGet

-- | @GET \/stock\/market\/previous@
-- 
stockMarketPreviousGet
  :: IEXHaskellSDKRequest
       StockMarketPreviousGet
       MimeNoContent
       ((Map.Map String PriceData))
       MimeJSON
stockMarketPreviousGet = _mkRequest "GET" ["/stock/market/previous"]

data StockMarketPreviousGet
-- | @application/json@
instance Produces StockMarketPreviousGet MimeJSON


-- *** stockMarketSectorPerformanceGet

-- | @GET \/stock\/market\/sector-performance@
-- 
stockMarketSectorPerformanceGet
  :: IEXHaskellSDKRequest
       StockMarketSectorPerformanceGet
       MimeNoContent
       [StockMarketSectorPerformanceGetResponse]
       MimeJSON
stockMarketSectorPerformanceGet =
  _mkRequest "GET" ["/stock/market/sector-performance"]

data StockMarketSectorPerformanceGet
-- | @application/json@
instance Produces StockMarketSectorPerformanceGet MimeJSON


-- *** stockMarketShortInterestDateGet

-- | @GET \/stock\/market\/short-interest\/{date}@
-- 
stockMarketShortInterestDateGet
  :: Symbol -- ^ "symbol"
  -> ParamDate -- ^ "date"
  -> IEXHaskellSDKRequest
       StockMarketShortInterestDateGet
       MimeNoContent
       [ShortInterest]
       MimeJSON
stockMarketShortInterestDateGet (Symbol symbol) (ParamDate date) =
  _mkRequest "GET" ["/stock/market/short-interest/", toPath date]

data StockMarketShortInterestDateGet
instance HasOptionalParam StockMarketShortInterestDateGet Format2 where
  applyOptionalParam req (Format2 xs) =
    req `setQuery` toQuery ("format", Just xs)
-- | @application/json@
instance Produces StockMarketShortInterestDateGet MimeJSON


-- *** stockMarketShortInterestGet

-- | @GET \/stock\/market\/short-interest@
-- 
stockMarketShortInterestGet
  :: Symbol -- ^ "symbol"
  -> IEXHaskellSDKRequest
       StockMarketShortInterestGet
       MimeNoContent
       [ShortInterest]
       MimeJSON
stockMarketShortInterestGet (Symbol symbol) =
  _mkRequest "GET" ["/stock/market/short-interest"]

data StockMarketShortInterestGet
instance HasOptionalParam StockMarketShortInterestGet Format2 where
  applyOptionalParam req (Format2 xs) =
    req `setQuery` toQuery ("format", Just xs)
-- | @application/json@
instance Produces StockMarketShortInterestGet MimeJSON


-- *** stockMarketThresholdSecuritiesDateGet

-- | @GET \/stock\/market\/threshold-securities\/{date}@
-- 
stockMarketThresholdSecuritiesDateGet
  :: ParamDate -- ^ "date"
  -> IEXHaskellSDKRequest
       StockMarketThresholdSecuritiesDateGet
       MimeNoContent
       [StockMarketThresholdSecuritiesGetResponse]
       MimeJSON
stockMarketThresholdSecuritiesDateGet (ParamDate date) =
  _mkRequest "GET" ["/stock/market/threshold-securities/", toPath date]

data StockMarketThresholdSecuritiesDateGet
instance HasOptionalParam StockMarketThresholdSecuritiesDateGet Format2 where
  applyOptionalParam req (Format2 xs) =
    req `setQuery` toQuery ("format", Just xs)

-- | /Optional Param/ "token" - Value is the API token from your IEX user account. If you have been permissioned for CUSIP information you'll  receive a CUSIP field, otherwise data defaults to exclude CUSIP. 
instance HasOptionalParam StockMarketThresholdSecuritiesDateGet Token where
  applyOptionalParam req (Token xs) = req `setQuery` toQuery ("token", Just xs)
-- | @application/json@
instance Produces StockMarketThresholdSecuritiesDateGet MimeJSON


-- *** stockMarketThresholdSecuritiesGet

-- | @GET \/stock\/market\/threshold-securities@
-- 
stockMarketThresholdSecuritiesGet
  :: IEXHaskellSDKRequest
       StockMarketThresholdSecuritiesGet
       MimeNoContent
       [StockMarketThresholdSecuritiesGetResponse]
       MimeJSON
stockMarketThresholdSecuritiesGet =
  _mkRequest "GET" ["/stock/market/threshold-securities"]

data StockMarketThresholdSecuritiesGet
instance HasOptionalParam StockMarketThresholdSecuritiesGet Format2 where
  applyOptionalParam req (Format2 xs) =
    req `setQuery` toQuery ("format", Just xs)

-- | /Optional Param/ "token" - Value is the API token from your IEX user account. If you have been permissioned for CUSIP information you'll  receive a CUSIP field, otherwise data defaults to exclude CUSIP. 
instance HasOptionalParam StockMarketThresholdSecuritiesGet Token where
  applyOptionalParam req (Token xs) = req `setQuery` toQuery ("token", Just xs)
-- | @application/json@
instance Produces StockMarketThresholdSecuritiesGet MimeJSON


-- *** stockMarketTodayEarningsGet

-- | @GET \/stock\/market\/today-earnings@
-- 
stockMarketTodayEarningsGet
  :: IEXHaskellSDKRequest
       StockMarketTodayEarningsGet
       MimeNoContent
       StockMarketTodayEarningsGetResponse
       MimeJSON
stockMarketTodayEarningsGet = _mkRequest "GET" ["/stock/market/today-earnings"]

data StockMarketTodayEarningsGet
-- | @application/json@
instance Produces StockMarketTodayEarningsGet MimeJSON


-- *** stockMarketTodayIposGet

-- | @GET \/stock\/market\/today-ipos@
-- 
stockMarketTodayIposGet
  :: IEXHaskellSDKRequest
       StockMarketTodayIposGet
       MimeNoContent
       StockMarketUpcomingIposGetResponse
       MimeJSON
stockMarketTodayIposGet = _mkRequest "GET" ["/stock/market/today-ipos"]

data StockMarketTodayIposGet
-- | @application/json@
instance Produces StockMarketTodayIposGet MimeJSON


-- *** stockMarketUpcomingIposGet

-- | @GET \/stock\/market\/upcoming-ipos@
-- 
stockMarketUpcomingIposGet
  :: IEXHaskellSDKRequest
       StockMarketUpcomingIposGet
       MimeNoContent
       StockMarketUpcomingIposGetResponse
       MimeJSON
stockMarketUpcomingIposGet = _mkRequest "GET" ["/stock/market/upcoming-ipos"]

data StockMarketUpcomingIposGet
-- | @application/json@
instance Produces StockMarketUpcomingIposGet MimeJSON


-- *** stockSymbolBatchGet

-- | @GET \/stock\/{symbol}\/batch@
-- 
stockSymbolBatchGet
  :: Symbol -- ^ "symbol"
  -> Types -- ^ "types"
  -> IEXHaskellSDKRequest
       StockSymbolBatchGet
       MimeNoContent
       A.Value
       MimeJSON
stockSymbolBatchGet (Symbol symbol) (Types types) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/batch"]
    `setQuery` toQueryColl MultiParamArray ("types", Just types)

data StockSymbolBatchGet
instance HasOptionalParam StockSymbolBatchGet Range where
  applyOptionalParam req (Range xs) = req `setQuery` toQuery ("range", Just xs)
-- | @application/json@
instance Produces StockSymbolBatchGet MimeJSON


-- *** stockSymbolBookGet

-- | @GET \/stock\/{symbol}\/book@
-- 
stockSymbolBookGet
  :: Symbol -- ^ "symbol"
  -> IEXHaskellSDKRequest
       StockSymbolBookGet
       MimeNoContent
       StockSymbolBookGetResponse
       MimeJSON
stockSymbolBookGet (Symbol symbol) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/book"]

data StockSymbolBookGet
-- | @application/json@
instance Produces StockSymbolBookGet MimeJSON


-- *** stockSymbolChart1dGet

-- | @GET \/stock\/{symbol}\/chart\/1d@
-- 
stockSymbolChart1dGet
  :: Symbol -- ^ "symbol"
  -> IEXHaskellSDKRequest
       StockSymbolChart1dGet
       MimeNoContent
       [ChartAll]
       MimeJSON
stockSymbolChart1dGet (Symbol symbol) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/chart/1d"]

data StockSymbolChart1dGet

-- | /Optional Param/ "chartReset" - If true, 1d chart will reset at midnight instead of the default behavior of 9:30am ET.
instance HasOptionalParam StockSymbolChart1dGet ChartReset where
  applyOptionalParam req (ChartReset xs) =
    req `setQuery` toQuery ("chartReset", Just xs)

-- | /Optional Param/ "chartSimplify" - If true, runs a polyline simplification using the Douglas-Peucker algorithm. This is useful if plotting sparkline charts.
instance HasOptionalParam StockSymbolChart1dGet ChartSimplify where
  applyOptionalParam req (ChartSimplify xs) =
    req `setQuery` toQuery ("chartSimplify", Just xs)

-- | /Optional Param/ "chartInterval" - If passed, chart data will return every Nth element as defined by chartInterval.
instance HasOptionalParam StockSymbolChart1dGet ChartInterval where
  applyOptionalParam req (ChartInterval xs) =
    req `setQuery` toQuery ("chartInterval", Just xs)

-- | /Optional Param/ "changeFromClose" - If true, `changeOverTime` and `marketChangeOverTime` will be relative to previous day close instead of the first value.
instance HasOptionalParam StockSymbolChart1dGet ChangeFromClose where
  applyOptionalParam req (ChangeFromClose xs) =
    req `setQuery` toQuery ("changeFromClose", Just xs)

-- | /Optional Param/ "chartLast" - If passed, chart data will return the last N elements.
instance HasOptionalParam StockSymbolChart1dGet ChartLast where
  applyOptionalParam req (ChartLast xs) =
    req `setQuery` toQuery ("chartLast", Just xs)
-- | @application/json@
instance Produces StockSymbolChart1dGet MimeJSON


-- *** stockSymbolChartDateDateGet

-- | @GET \/stock\/{symbol}\/chart\/date\/{date}@
-- 
stockSymbolChartDateDateGet
  :: Symbol -- ^ "symbol"
  -> ParamDate -- ^ "date"
  -> IEXHaskellSDKRequest
       StockSymbolChartDateDateGet
       MimeNoContent
       ChartAll
       MimeJSON
stockSymbolChartDateDateGet (Symbol symbol) (ParamDate date) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/chart/date/", toPath date]

data StockSymbolChartDateDateGet

-- | /Optional Param/ "chartReset" - If true, 1d chart will reset at midnight instead of the default behavior of 9:30am ET.
instance HasOptionalParam StockSymbolChartDateDateGet ChartReset where
  applyOptionalParam req (ChartReset xs) =
    req `setQuery` toQuery ("chartReset", Just xs)

-- | /Optional Param/ "chartSimplify" - If true, runs a polyline simplification using the Douglas-Peucker algorithm. This is useful if plotting sparkline charts.
instance HasOptionalParam StockSymbolChartDateDateGet ChartSimplify where
  applyOptionalParam req (ChartSimplify xs) =
    req `setQuery` toQuery ("chartSimplify", Just xs)

-- | /Optional Param/ "chartInterval" - If passed, chart data will return every Nth element as defined by chartInterval.
instance HasOptionalParam StockSymbolChartDateDateGet ChartInterval where
  applyOptionalParam req (ChartInterval xs) =
    req `setQuery` toQuery ("chartInterval", Just xs)

-- | /Optional Param/ "changeFromClose" - If true, `changeOverTime` and `marketChangeOverTime` will be relative to previous day close instead of the first value.
instance HasOptionalParam StockSymbolChartDateDateGet ChangeFromClose where
  applyOptionalParam req (ChangeFromClose xs) =
    req `setQuery` toQuery ("changeFromClose", Just xs)

-- | /Optional Param/ "chartLast" - If passed, chart data will return the last N elements.
instance HasOptionalParam StockSymbolChartDateDateGet ChartLast where
  applyOptionalParam req (ChartLast xs) =
    req `setQuery` toQuery ("chartLast", Just xs)
-- | @application/json@
instance Produces StockSymbolChartDateDateGet MimeJSON


-- *** stockSymbolChartDynamicGet

-- | @GET \/stock\/{symbol}\/chart\/dynamic@
-- 
stockSymbolChartDynamicGet
  :: Symbol -- ^ "symbol"
  -> IEXHaskellSDKRequest
       StockSymbolChartDynamicGet
       MimeNoContent
       StockSymbolChartDynamicGetResponse
       MimeJSON
stockSymbolChartDynamicGet (Symbol symbol) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/chart/dynamic"]

data StockSymbolChartDynamicGet

-- | /Optional Param/ "chartReset" - If true, 1d chart will reset at midnight instead of the default behavior of 9:30am ET.
instance HasOptionalParam StockSymbolChartDynamicGet ChartReset where
  applyOptionalParam req (ChartReset xs) =
    req `setQuery` toQuery ("chartReset", Just xs)

-- | /Optional Param/ "chartSimplify" - If true, runs a polyline simplification using the Douglas-Peucker algorithm. This is useful if plotting sparkline charts.
instance HasOptionalParam StockSymbolChartDynamicGet ChartSimplify where
  applyOptionalParam req (ChartSimplify xs) =
    req `setQuery` toQuery ("chartSimplify", Just xs)

-- | /Optional Param/ "chartInterval" - If passed, chart data will return every Nth element as defined by chartInterval.
instance HasOptionalParam StockSymbolChartDynamicGet ChartInterval where
  applyOptionalParam req (ChartInterval xs) =
    req `setQuery` toQuery ("chartInterval", Just xs)

-- | /Optional Param/ "changeFromClose" - If true, `changeOverTime` and `marketChangeOverTime` will be relative to previous day close instead of the first value.
instance HasOptionalParam StockSymbolChartDynamicGet ChangeFromClose where
  applyOptionalParam req (ChangeFromClose xs) =
    req `setQuery` toQuery ("changeFromClose", Just xs)

-- | /Optional Param/ "chartLast" - If passed, chart data will return the last N elements.
instance HasOptionalParam StockSymbolChartDynamicGet ChartLast where
  applyOptionalParam req (ChartLast xs) =
    req `setQuery` toQuery ("chartLast", Just xs)
-- | @application/json@
instance Produces StockSymbolChartDynamicGet MimeJSON


-- *** stockSymbolChartRangeGet

-- | @GET \/stock\/{symbol}\/chart\/{range}@
-- 
stockSymbolChartRangeGet
  :: Symbol -- ^ "symbol"
  -> Range2 -- ^ "range"
  -> IEXHaskellSDKRequest
       StockSymbolChartRangeGet
       MimeNoContent
       [ChartAll]
       MimeJSON
stockSymbolChartRangeGet (Symbol symbol) (Range2 range) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/chart/", toPath range]

data StockSymbolChartRangeGet

-- | /Optional Param/ "chartReset" - If true, 1d chart will reset at midnight instead of the default behavior of 9:30am ET.
instance HasOptionalParam StockSymbolChartRangeGet ChartReset where
  applyOptionalParam req (ChartReset xs) =
    req `setQuery` toQuery ("chartReset", Just xs)

-- | /Optional Param/ "chartSimplify" - If true, runs a polyline simplification using the Douglas-Peucker algorithm. This is useful if plotting sparkline charts.
instance HasOptionalParam StockSymbolChartRangeGet ChartSimplify where
  applyOptionalParam req (ChartSimplify xs) =
    req `setQuery` toQuery ("chartSimplify", Just xs)

-- | /Optional Param/ "chartInterval" - If passed, chart data will return every Nth element as defined by chartInterval.
instance HasOptionalParam StockSymbolChartRangeGet ChartInterval where
  applyOptionalParam req (ChartInterval xs) =
    req `setQuery` toQuery ("chartInterval", Just xs)

-- | /Optional Param/ "changeFromClose" - If true, `changeOverTime` and `marketChangeOverTime` will be relative to previous day close instead of the first value.
instance HasOptionalParam StockSymbolChartRangeGet ChangeFromClose where
  applyOptionalParam req (ChangeFromClose xs) =
    req `setQuery` toQuery ("changeFromClose", Just xs)

-- | /Optional Param/ "chartLast" - If passed, chart data will return the last N elements.
instance HasOptionalParam StockSymbolChartRangeGet ChartLast where
  applyOptionalParam req (ChartLast xs) =
    req `setQuery` toQuery ("chartLast", Just xs)
-- | @application/json@
instance Produces StockSymbolChartRangeGet MimeJSON


-- *** stockSymbolCompanyGet

-- | @GET \/stock\/{symbol}\/company@
-- 
stockSymbolCompanyGet
  :: Symbol -- ^ "symbol"
  -> IEXHaskellSDKRequest
       StockSymbolCompanyGet
       MimeNoContent
       StockSymbolCompanyGetResponse
       MimeJSON
stockSymbolCompanyGet (Symbol symbol) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/company"]

data StockSymbolCompanyGet
-- | @application/json@
instance Produces StockSymbolCompanyGet MimeJSON


-- *** stockSymbolDelayedQuoteGet

-- | @GET \/stock\/{symbol}\/delayed-quote@
-- 
stockSymbolDelayedQuoteGet
  :: Symbol -- ^ "symbol"
  -> IEXHaskellSDKRequest
       StockSymbolDelayedQuoteGet
       MimeNoContent
       StockSymbolDelayedQuoteGetResponse
       MimeJSON
stockSymbolDelayedQuoteGet (Symbol symbol) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/delayed-quote"]

data StockSymbolDelayedQuoteGet
-- | @application/json@
instance Produces StockSymbolDelayedQuoteGet MimeJSON


-- *** stockSymbolDividendsRangeGet

-- | @GET \/stock\/{symbol}\/dividends\/{range}@
-- 
stockSymbolDividendsRangeGet
  :: Symbol -- ^ "symbol"
  -> Range2 -- ^ "range"
  -> IEXHaskellSDKRequest
       StockSymbolDividendsRangeGet
       MimeNoContent
       [StockSymbolDividendsRangeGetResponse]
       MimeJSON
stockSymbolDividendsRangeGet (Symbol symbol) (Range2 range) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/dividends/", toPath range]

data StockSymbolDividendsRangeGet
-- | @application/json@
instance Produces StockSymbolDividendsRangeGet MimeJSON


-- *** stockSymbolEarningsGet

-- | @GET \/stock\/{symbol}\/earnings@
-- 
stockSymbolEarningsGet
  :: Symbol -- ^ "symbol"
  -> IEXHaskellSDKRequest
       StockSymbolEarningsGet
       MimeNoContent
       StockSymbolEarningsGetResponse
       MimeJSON
stockSymbolEarningsGet (Symbol symbol) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/earnings"]

data StockSymbolEarningsGet
-- | @application/json@
instance Produces StockSymbolEarningsGet MimeJSON


-- *** stockSymbolEffectiveSpreadGet

-- | @GET \/stock\/{symbol}\/effective-spread@
-- 
stockSymbolEffectiveSpreadGet
  :: Symbol -- ^ "symbol"
  -> IEXHaskellSDKRequest
       StockSymbolEffectiveSpreadGet
       MimeNoContent
       [StockSymbolEffectiveSpreadGetResponse]
       MimeJSON
stockSymbolEffectiveSpreadGet (Symbol symbol) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/effective-spread"]

data StockSymbolEffectiveSpreadGet
-- | @application/json@
instance Produces StockSymbolEffectiveSpreadGet MimeJSON


-- *** stockSymbolFinancialsGet

-- | @GET \/stock\/{symbol}\/financials@
-- 
stockSymbolFinancialsGet
  :: Symbol -- ^ "symbol"
  -> IEXHaskellSDKRequest
       StockSymbolFinancialsGet
       MimeNoContent
       StockSymbolFinancialsGetResponse
       MimeJSON
stockSymbolFinancialsGet (Symbol symbol) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/financials"]

data StockSymbolFinancialsGet

-- | /Optional Param/ "period" - Allows you to specify annual or quarterly financials. Defaults to quarterly. Values should be `annual` or `quarter`
instance HasOptionalParam StockSymbolFinancialsGet Period where
  applyOptionalParam req (Period xs) =
    req `setQuery` toQuery ("period", Just xs)
-- | @application/json@
instance Produces StockSymbolFinancialsGet MimeJSON


-- *** stockSymbolLargestTradesGet

-- | @GET \/stock\/{symbol}\/largest-trades@
-- 
stockSymbolLargestTradesGet
  :: Symbol -- ^ "symbol"
  -> IEXHaskellSDKRequest
       StockSymbolLargestTradesGet
       MimeNoContent
       [StockSymbolLargestTradesGetResponse]
       MimeJSON
stockSymbolLargestTradesGet (Symbol symbol) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/largest-trades"]

data StockSymbolLargestTradesGet
-- | @application/json@
instance Produces StockSymbolLargestTradesGet MimeJSON


-- *** stockSymbolLogoGet

-- | @GET \/stock\/{symbol}\/logo@
-- 
stockSymbolLogoGet
  :: Symbol -- ^ "symbol"
  -> IEXHaskellSDKRequest
       StockSymbolLogoGet
       MimeNoContent
       StockSymbolLogoGetResponse
       MimeJSON
stockSymbolLogoGet (Symbol symbol) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/logo"]

data StockSymbolLogoGet
-- | @application/json@
instance Produces StockSymbolLogoGet MimeJSON


-- *** stockSymbolNewsGet

-- | @GET \/stock\/{symbol}\/news@
-- 
stockSymbolNewsGet
  :: Symbol -- ^ "symbol"
  -> IEXHaskellSDKRequest StockSymbolNewsGet MimeNoContent [Article] MimeJSON
stockSymbolNewsGet (Symbol symbol) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/news"]

data StockSymbolNewsGet
-- | @application/json@
instance Produces StockSymbolNewsGet MimeJSON


-- *** stockSymbolNewsLastLastGet

-- | @GET \/stock\/{symbol}\/news\/last\/{last}@
-- 
stockSymbolNewsLastLastGet
  :: Symbol -- ^ "symbol"
  -> Last -- ^ "last"
  -> IEXHaskellSDKRequest
       StockSymbolNewsLastLastGet
       MimeNoContent
       [Article]
       MimeJSON
stockSymbolNewsLastLastGet (Symbol symbol) (Last last) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/news/last/", toPath last]

data StockSymbolNewsLastLastGet
-- | @application/json@
instance Produces StockSymbolNewsLastLastGet MimeJSON


-- *** stockSymbolOhlcGet

-- | @GET \/stock\/{symbol}\/ohlc@
-- 
stockSymbolOhlcGet
  :: Symbol -- ^ "symbol"
  -> IEXHaskellSDKRequest StockSymbolOhlcGet MimeNoContent OhlcData MimeJSON
stockSymbolOhlcGet (Symbol symbol) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/ohlc"]

data StockSymbolOhlcGet
-- | @application/json@
instance Produces StockSymbolOhlcGet MimeJSON


-- *** stockSymbolPeersGet

-- | @GET \/stock\/{symbol}\/peers@
-- 
stockSymbolPeersGet
  :: Symbol -- ^ "symbol"
  -> IEXHaskellSDKRequest StockSymbolPeersGet MimeNoContent [Text] MimeJSON
stockSymbolPeersGet (Symbol symbol) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/peers"]

data StockSymbolPeersGet
-- | @application/json@
instance Produces StockSymbolPeersGet MimeJSON


-- *** stockSymbolPreviousGet

-- | @GET \/stock\/{symbol}\/previous@
-- 
stockSymbolPreviousGet
  :: Symbol -- ^ "symbol"
  -> IEXHaskellSDKRequest
       StockSymbolPreviousGet
       MimeNoContent
       PriceData
       MimeJSON
stockSymbolPreviousGet (Symbol symbol) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/previous"]

data StockSymbolPreviousGet
-- | @application/json@
instance Produces StockSymbolPreviousGet MimeJSON


-- *** stockSymbolPriceGet

-- | @GET \/stock\/{symbol}\/price@
-- 
stockSymbolPriceGet
  :: Symbol -- ^ "symbol"
  -> IEXHaskellSDKRequest StockSymbolPriceGet MimeNoContent Double MimeJSON
stockSymbolPriceGet (Symbol symbol) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/price"]

data StockSymbolPriceGet
-- | @application/json@
instance Produces StockSymbolPriceGet MimeJSON


-- *** stockSymbolQuoteGet

-- | @GET \/stock\/{symbol}\/quote@
-- 
stockSymbolQuoteGet
  :: Symbol -- ^ "symbol"
  -> IEXHaskellSDKRequest StockSymbolQuoteGet MimeNoContent Quote MimeJSON
stockSymbolQuoteGet (Symbol symbol) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/quote"]

data StockSymbolQuoteGet

-- | /Optional Param/ "displayPercent" - If set to `true`, all percentage values will be multiplied by a factor of 100.  (e.g. /stock/appl/quote?displayPercent=true) 
instance HasOptionalParam StockSymbolQuoteGet DisplayPercent where
  applyOptionalParam req (DisplayPercent xs) =
    req `setQuery` toQuery ("displayPercent", Just xs)
-- | @application/json@
instance Produces StockSymbolQuoteGet MimeJSON


-- *** stockSymbolRelevantGet

-- | @GET \/stock\/{symbol}\/relevant@
-- 
stockSymbolRelevantGet
  :: Symbol -- ^ "symbol"
  -> IEXHaskellSDKRequest
       StockSymbolRelevantGet
       MimeNoContent
       StockSymbolRelevantGetResponse
       MimeJSON
stockSymbolRelevantGet (Symbol symbol) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/relevant"]

data StockSymbolRelevantGet
-- | @application/json@
instance Produces StockSymbolRelevantGet MimeJSON


-- *** stockSymbolShortInterestDateGet

-- | @GET \/stock\/{symbol}\/short-interest\/{date}@
-- 
stockSymbolShortInterestDateGet
  :: Symbol -- ^ "symbol"
  -> ParamDate -- ^ "date"
  -> IEXHaskellSDKRequest
       StockSymbolShortInterestDateGet
       MimeNoContent
       [ShortInterest]
       MimeJSON
stockSymbolShortInterestDateGet (Symbol symbol) (ParamDate date) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/short-interest/", toPath date]

data StockSymbolShortInterestDateGet
instance HasOptionalParam StockSymbolShortInterestDateGet Format2 where
  applyOptionalParam req (Format2 xs) =
    req `setQuery` toQuery ("format", Just xs)
-- | @application/json@
instance Produces StockSymbolShortInterestDateGet MimeJSON


-- *** stockSymbolShortInterestGet

-- | @GET \/stock\/{symbol}\/short-interest@
-- 
stockSymbolShortInterestGet
  :: Symbol -- ^ "symbol"
  -> IEXHaskellSDKRequest
       StockSymbolShortInterestGet
       MimeNoContent
       [ShortInterest]
       MimeJSON
stockSymbolShortInterestGet (Symbol symbol) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/short-interest"]

data StockSymbolShortInterestGet
instance HasOptionalParam StockSymbolShortInterestGet Format2 where
  applyOptionalParam req (Format2 xs) =
    req `setQuery` toQuery ("format", Just xs)
-- | @application/json@
instance Produces StockSymbolShortInterestGet MimeJSON


-- *** stockSymbolStatsGet

-- | @GET \/stock\/{symbol}\/stats@
-- 
stockSymbolStatsGet
  :: Symbol -- ^ "symbol"
  -> IEXHaskellSDKRequest
       StockSymbolStatsGet
       MimeNoContent
       StockSymbolStatsGetResponse
       MimeJSON
stockSymbolStatsGet (Symbol symbol) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/stats"]

data StockSymbolStatsGet
-- | @application/json@
instance Produces StockSymbolStatsGet MimeJSON


-- *** stockSymbolVolumeByVenueGet

-- | @GET \/stock\/{symbol}\/volume-by-venue@
-- 
stockSymbolVolumeByVenueGet
  :: Symbol -- ^ "symbol"
  -> IEXHaskellSDKRequest
       StockSymbolVolumeByVenueGet
       MimeNoContent
       [StockSymbolVolumeByVenueGetResponse]
       MimeJSON
stockSymbolVolumeByVenueGet (Symbol symbol) =
  _mkRequest "GET" ["/stock/", toPath symbol, "/volume-by-venue"]

data StockSymbolVolumeByVenueGet
-- | @application/json@
instance Produces StockSymbolVolumeByVenueGet MimeJSON


-- *** stocksSymbolSplitsRangeGet

-- | @GET \/stocks\/{symbol}\/splits\/{range}@
-- 
stocksSymbolSplitsRangeGet
  :: Symbol -- ^ "symbol"
  -> Range2 -- ^ "range"
  -> IEXHaskellSDKRequest
       StocksSymbolSplitsRangeGet
       MimeNoContent
       [StocksSymbolSplitsRangeGetResponse]
       MimeJSON
stocksSymbolSplitsRangeGet (Symbol symbol) (Range2 range) =
  _mkRequest "GET" ["/stocks/", toPath symbol, "/splits/", toPath range]

data StocksSymbolSplitsRangeGet
-- | @application/json@
instance Produces StocksSymbolSplitsRangeGet MimeJSON


-- *** topsGet

-- | @GET \/tops@
-- 
topsGet :: IEXHaskellSDKRequest TopsGet MimeNoContent [TopsGetResponse] MimeJSON
topsGet = _mkRequest "GET" ["/tops"]

data TopsGet
instance HasOptionalParam TopsGet Symbols where
  applyOptionalParam req (Symbols xs) =
    req `setQuery` toQueryColl MultiParamArray ("symbols", Just xs)
instance HasOptionalParam TopsGet Format where
  applyOptionalParam req (Format xs) =
    req `setQuery` toQuery ("format", Just xs)
-- | @application/json@
instance Produces TopsGet MimeJSON


-- *** topsLastGet

-- | @GET \/tops\/last@
-- 
topsLastGet
  :: IEXHaskellSDKRequest
       TopsLastGet
       MimeNoContent
       [TopsLastGetResponse]
       MimeJSON
topsLastGet = _mkRequest "GET" ["/tops/last"]

data TopsLastGet
instance HasOptionalParam TopsLastGet Symbols where
  applyOptionalParam req (Symbols xs) =
    req `setQuery` toQueryColl MultiParamArray ("symbols", Just xs)
instance HasOptionalParam TopsLastGet Format where
  applyOptionalParam req (Format xs) =
    req `setQuery` toQuery ("format", Just xs)
-- | @application/json@
instance Produces TopsLastGet MimeJSON

